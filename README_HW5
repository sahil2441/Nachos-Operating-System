##################################################################
##################################################################
						Sahil Jain
						110281300
						sahjain@cs.stonybrook.edu
##################################################################
##################################################################

MAJOR CHANGES MADE:
	
	Mmap System Call
--	void *Mmap(char *name, int *sizep);

	Created a new system call that takes as arguments a string name and an integer pointer sizep.
	From exception handler when this system call is made, the following method is called:
	nachos.kernel.userprog.Syscall.mmap(String, int)
	
	which in turn calls the method
	nachos.kernel.userprog.AddrSpace.executeMmap(String, int)
	
	This method checks whether a file with the given file name exists. If it doesn't the method return 0.
	If it does it calls the method 
	nachos.kernel.userprog.AddrSpace.extendAddressSpace(int)
	
	to extend the page table array in address space by the required size.
	
	Then it copies the size of the size of the file in a byte buffer and copies that into the 
	Machine.mainmemory.
	
	And finally, before returning that virtual address, it updates the map 
	nachos.kernel.userprog.AddrSpace.openFileMap
	
	that keeps track of virtual address and OpenFile. This is done to handle cases in which Mmap syscall
	is executed with multiple file names in sequence.


##################################################################

--	Handling Pagefault Exception
	From exception handler the page fault occurs when:
	which == MachineException.PageFaultException
	
	and the following method is called that takes argument as the virtual address:
	nachos.kernel.userprog.AddrSpace.handlePageFaultException(int)
	
	This method allocates memory for physical page and sets the valid flag =true.
	Then it copies the file at the given page into byte array and copies the byte array into the 
	Machine.mainmemory at the physical address.
	
	We also maintin the map
	nachos.kernel.userprog.AddrSpace.mapOfVirPNStartingIndex
	
	that keeps track of the virtual page number and the starting index of the file, from where we started reading
	data. We use this map in the Munmap syscall.
	
##################################################################

	Munmap System Call:
--	int Munmap(void *addr);
	Created a new system call that takes as its argument an address that was returned by a previous call to Mmap.
	
	The method in syscall:
	nachos.kernel.userprog.Syscall.Munmap(int)
	
	is called from Exception handler and this method further calls:
	nachos.kernel.userprog.AddrSpace.executeMunmap(int)
	
	This method deallocates the memory from physical memory manager by iterating over the page table array and 
	checking which pages are dirty. And then copies the pages from main memory into the file.
	
	The method:
	nachos.kernel.userprog.AddrSpace.printBuffer(byte[])
	
	can be used to check the contents of the buffer array and has been created for debugging purposes.
	
##################################################################

--	Test Cases:
	 
	I've created two test cases for testing the system calls. Enter this in the Run configuration:
	-d -f -x test/mmap_test2
	
	and
	-d -f -x test/mmap_test1
	
	The method:
	nachos.kernel.Nachos.executeOpertions()
	
	creates a file in the file system with the name as specified in the user programs.
	
